Add user authentication and recommendations to existing DC restaurant app.
Currently have:
- Restaurant A/B comparison
- Global rankings
- Personal rankings
- Basic restaurant data
- Ranking algorithms

Add these new features:

1. Add to schema:
*/

// prisma/schema.prisma
// (Keep existing Restaurant, GlobalRanking, and PersonalRanking models)

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  choices     Choice[]
  preferences Json     // Stores cuisine preferences
  createdAt   DateTime @default(now())
}

model Choice {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  winnerId   String
  loserId    String
  context    Json     // time of day, occasion, etc.
  createdAt  DateTime @default(now())
}

/*
2. Add recommendation engine:
*/

// lib/recommendations.ts
export class Recommender {
  async getRecommendations(userId: string) {
    const userChoices = await this.getUserChoices(userId);
    const preferences = this.calculatePreferences(userChoices);
    const similarUsers = await this.findSimilarUsers(userId, preferences);
    
    return this.getRecommendedRestaurants(
      userId,
      similarUsers,
      preferences
    );
  }

  private calculatePreferences(choices: Choice[]) {
    return choices.reduce((prefs, choice) => {
      const winner = choice.winner;
      winner.cuisineTypes.forEach(cuisine => {
        prefs[cuisine] = (prefs[cuisine] || 0) + 1;
      });
      return prefs;
    }, {} as Record<string, number>);
  }

  private async findSimilarUsers(
    userId: string, 
    preferences: Record<string, number>
  ) {
    // Find users with similar choice patterns
    // Prioritize users with similar personal rankings
    return prisma.user.findMany({
      where: {
        id: { not: userId },
        choices: {
          some: {
            winner: {
              cuisineTypes: {
                hasSome: Object.keys(preferences)
              }
            }
          }
        }
      },
      take: 10
    });
  }
}

/*
3. Add recommendations view:
*/

// components/RecommendedForYou.tsx
export const RecommendedForYou = () => {
  const { user } = useUser();
  const { data: recommendations } = api.recommendations.get.useQuery(
    undefined,
    { enabled: !!user }
  );

  return (
    <div className="max-w-4xl mx-auto p-4">
      <h2 className="text-2xl font-bold mb-4">
        Recommended for You
      </h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {recommendations?.map(restaurant => (
          <RestaurantCard
            key={restaurant.id}
            restaurant={restaurant}
            score={restaurant.personalRanking?.score}
            showPersonalRank
          />
        ))}
      </div>
    </div>
  );
};

/*
4. Add auth wrapper to existing app:
*/

// pages/_app.tsx
export default function App({ Component, pageProps }) {
  return (
    <ClerkProvider>
      <Header />
      <Component {...pageProps} />
    </ClerkProvider>
  );
}

// components/Header.tsx
export const Header = () => {
  const { user, isSignedIn } = useUser();
  
  return (
    <header className="border-b">
      <div className="max-w-4xl mx-auto p-4 flex justify-between">
        <nav className="flex gap-4">
          <Link href="/">Compare</Link>
          <Link href="/rankings">Rankings</Link>
          {isSignedIn && (
            <Link href="/recommendations">For You</Link>
          )}
        </nav>
        <UserButton />
      </div>
    </header>
  );
};

/*
5. Add recommendations API:
*/

// server/api/routers/recommendations.ts
export const recommendationsRouter = createTRPCRouter({
  get: protectedProcedure
    .query(async ({ ctx }) => {
      const recommender = new Recommender();
      return recommender.getRecommendations(ctx.session.userId);
    })
});

/*
Implementation Steps:

1. Add Auth:
- Setup Clerk
- Add auth middleware
- Protect personal rankings
- Add user context

2. Add Recommendations:
- Build recommendation engine
- Add recommendations page
- Update navigation
- Add API endpoints

3. Update Existing Features:
- Add user context to choices
- Keep personal/global rankings
- Maintain existing UI

Keep your existing:
- Comparison logic
- Ranking systems
- Restaurant data
- Core UI components

Testing:
- Auth flow
- Recommendation quality
- Integration with rankings
- Mobile responsiveness

This adds user authentication and recommendations while preserving your existing comparison and ranking functionality.